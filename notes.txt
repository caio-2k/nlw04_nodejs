Assim que criar o projeto, rodar o comando dentro da pasta API: yarn init -y (cria um package.json).

2 - Instalar dependencies
yarn add express -> cria node_modules e express.

Express é um micro-framework para trabalhar com node para criar rotas, middlewares, criar servidor para rodar a aplicação, mais utilizado pela comunidade node.js.

3 - Cria pasta scr com arquivo server.ts.

yarn add @types/express -D
Instalando como dependência de desenvolviemnto pois não irei utilizar em ambiente de produção.

Visualizar comentários para estrutura.

Para executar TS com node, instale o TS:
yarn add typescript -D

executar typescript na aplicação:
yarn tsc --init

Converter o código para Javascript, só que ao invés de converter iremos utilizar o ts-node-dev -D, ele mesmo irá em tempo de execução converter o codigo para typescript.

yarn add ts-node-dev D

No package.json criar um objeto scripts
dev com ts-node-dev/server.ts (vai rodar o arquivo).

"scripts":{
	"dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts"
},

Nome de rotas podem ser iguais mas os
metodos devem ser diferentes.

O Browser por padrão trabalha com reqs 
get, para trabalhar com outros metodos
que nao sejam get utilizaremos o insomnia (simular o cliente acessando nossa aplicação).

No manage environmetst adiciona:
"baseURL": "http://localhost:3333"
já iremos ter acesso ao localhost.

Cria uma requisição:
Requisição POST
Adiciona a baseURL e o "/" no final

ao dar um Send ele vai retornar a mensagem que estava aneriormente inserida no POST

---------------------------------------------------------------------------

2 Dia - BD

Knex - Querybuilders (informa qual será o BD)

TypeORM - ORM é um mapeamento entre objetos, vai pegar a nossa classe
dentro do nosso projeto (entidade) e vai conseguir mapear a classe para 
uma tabela especifica do banco de Dados.

TypeORM trabalha com typescript e consegue alterar o drive de conf de BD
tranquilamente pois ele se adapta.

to install -> get started
yarn add typeorm reflect-metadata

o driver que iremos utilizar será o sqlite3 pois é um banco em memoria
não precisaremos isntalar nada na nossa máquina, conseguimos utilizar em 
memoria, em produção não podemos utilizar ele.

yarn add sqlite3

> criar ormconfig.json, passar pro typeorm quais as info que iremos utilizar,
banco de dados, entidades, migrations, etc.

para isso criamos um JSON chamado ormconfig.json na pasta raiz:
{
  "type": "sqlite",
  "database": "./src/database/db.sqlite"
}

em seguida criamos uma pasta databases no dir raiz com um arquivo index.ts

import { createConnection } from "typeorm";

createConnection();

importar o reflect-metadata no server.ts e o database

uma vez feito isso só testar com yarn dev.

Criar migration de usuário:
migration permite que as alterações sejam feitas dentro do proprio projeto,
ou seja, qualquer alteralção feita e baixaxda poderá ser visualizad, ou seja,
migration guarda um histórico do nosso BD, toda estrutura de tabela irá 
ficar dentro de uma migration e portanto se alguem pegar o codigo e rodar 
as migrations sempre os bancos de dados estarão iguais.

Para criar migrations:
Para criarmos migrations precisamos criar um comando para rodas as migrations
para isso, no package.json em scripts iremos adicionar:
"typeorm": "ts-node-dev node_modules/typeorm/cli.js"

testar com yarn typeorm


definir a extensão das nossas migrations no ormconfig:
array pois podemos receber  mais de uma opção.
"migrations": ["./src/database/migrations/**.ts"],

criar pasta para receber as migrations dentro da pasta database e
adicionar a pasta no ormconfig:
"cli": {
    "migrationsDir": "./src/database/migrations"
  }

criar migration: yarn typeorm migration:create -n CreateUsers

Vai criar um arquivo na pasta informada.

lá criamos nossas tabelas.

para rodar a migration: yarn typeorm migration:run

como testar?

utilizando extension chamada sqlite ou preferencialmente beekeper studio.

a ferramenta solicita o BD informa sqlite e escolhe  onde tá o arquivo do DB.
dá pra testar a conexão e conectar. Lá teremos as migrations criadas



